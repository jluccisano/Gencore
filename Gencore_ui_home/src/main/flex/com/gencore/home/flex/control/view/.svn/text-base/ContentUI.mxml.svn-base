<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:maps="com.google.maps.*"
		 width="100%" height="100%" 
		 xmlns:mediator="org.lucciframework.luccimvc.view.mediator.*"
		 initialize="onInit()">
	<fx:Script>
		<![CDATA[
			import com.gencore.assets.ConstIcons;
			import com.gencore.commons.flex.model.MainModel;
			import com.gencore.commons.flex.vo.CourseVO;
			import com.gencore.commons.flex.vo.GPSLocationVO;
			import com.gencore.commons.flex.vo.TotalStatsVO;
			import com.gencore.home.flex.view.mediator.TrackerMediator;
			import com.gencore.home.flex.view.renderers.MarkerInfoRenderer;
			import com.google.maps.InfoWindowOptions;
			import com.google.maps.LatLng;
			import com.google.maps.MapMouseEvent;
			import com.google.maps.MapOptions;
			import com.google.maps.MapType;
			import com.google.maps.View;
			import com.google.maps.controls.ZoomControl;
			import com.google.maps.overlays.Marker;
			import com.google.maps.overlays.MarkerOptions;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Image;
			import mx.controls.Text;
			import mx.events.FlexEvent;
			
			[Bindable]
			private var mediator : TrackerMediator;
			

			[Bindable]
			public var coursesOfToday : ArrayCollection;
			
			[Bindable]
			public var totalStats : ArrayCollection;
						
			private function onInit() :void{
				this.mediator = trackerMediator.mediator as TrackerMediator;
				this.mediator.getTotalDistance();
			}
			
			private function refresh () : void {
				if(mediator == null ) {
					this.mediator = trackerMediator.mediator as TrackerMediator;
				}			
				this.mediator.getRunsOfToday();
				this.mediator.getTotalDistance();
				
			}
			
			
			public function onMapReady():void {
				

				map.enableScrollWheelZoom();
				map.enableContinuousZoom();
				map.addControl(new ZoomControl());
				map.setMapType(MapType.SATELLITE_MAP_TYPE);
				
				var coordinates : Array = new Array();

				
				
				for each ( var _course:CourseVO in coursesOfToday) {
					
					var gpsLocation:GPSLocationVO = _course.startLocation;	
					var latLng:LatLng = new LatLng(gpsLocation.lattitude,gpsLocation.longitude);
					coordinates.push(latLng);
					
					var markerOptions : MarkerOptions = new MarkerOptions();
					markerOptions.icon = new ConstIcons.trackerIcon();
					markerOptions.iconAlignment = MarkerOptions.ALIGN_HORIZONTAL_CENTER;
					markerOptions.iconOffset = new Point(0,0);
					
					var marker:Marker = new Marker(latLng,markerOptions);

					map.addOverlay(marker); 
					
					var renderer:MarkerInfoRenderer = new MarkerInfoRenderer();
					renderer.course = _course;
					
					marker.addEventListener(MapMouseEvent.CLICK, function(event:MapMouseEvent):void {
						marker.openInfoWindow(new InfoWindowOptions({customContent: renderer,																																
																	 width: 160,
																	 height: 60,
																	 drawDefaultFrame:true
																	 }));
					});
					
					map.setCenter(coordinates[0],14);

					
					
				}	
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<mediator:MediatorReference id="trackerMediator" 
									mediatorName="trackerMediator"
									componentName="contentUI"
									facadeRef="appFacade" />
	</fx:Declarations>
	
	<s:layout>
		<s:VerticalLayout/>
	</s:layout>
	
	<s:Group width="100%" height="5%">
		
		<s:layout>
			<s:HorizontalLayout horizontalAlign="left" paddingRight="20" paddingLeft="20"
								paddingBottom="10" paddingTop="10"/>
		</s:layout>
		
		
		<mx:Image source="{ConstIcons.cyclingSmallIcon}"/>
		<s:Label text="{(this.totalStats.getItemAt(0) as TotalStatsVO).distance.toPrecision(3) + ' km'}"
				 color="white" fontWeight="bold" paddingTop="10"/>
		<mx:Image source="{ConstIcons.runningSmallIcon}"/>		
		<s:Label text="{(this.totalStats.getItemAt(1) as TotalStatsVO).distance.toPrecision(3) + ' km'}"
				 color="white" fontWeight="bold" paddingTop="10"/>
		<mx:Image source="{ConstIcons.walkingSmallIcon}"/>
		<s:Label text="{(this.totalStats.getItemAt(2) as TotalStatsVO).distance.toPrecision(3) + ' km'}"
				 color="white" fontWeight="bold" paddingTop="10"/>
	</s:Group>
	

	<s:SkinnableContainer skinClass="com.gencore.home.flex.view.skins.ContentContainerSkin" 
						  width="100%" height="100%" 
						  horizontalCenter="0" 
						  verticalCenter="0">
		


			<maps:Map initialize="{onInit()}"
				id="map" left="5" right="5" top="5" bottom="5"
				key="{MainModel.GMAPSKEY}"
				mapevent_mapready="{refresh()}"
				width="100%" />		

	</s:SkinnableContainer>
	
</s:Group>
